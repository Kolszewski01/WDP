
#include <iostream>
#include <vector>
#include <random>
#include <map>

using namespace std;

vector<int>generuj(int a, int b)
{
    vector<int>tab;

    for (int i = 0; i < a; i++)
    {
        tab.push_back(rand() % b);
    }
    return tab;
}

void wypisz(map<int, int>map)
{
    for (auto i : map)
    {
        cout << i.first << " " << i.second << endl;
    }
}


int index(vector<int>tab, int x)
{

    for (int i = 0; i < tab.size();  i++)
    {
        if (tab[i] == x)
        {
            return i;
        }
    }
    return -1;
}

bool CzyNalezy(vector<int>tab, int x)
{
    return index(tab, x) > -1;
}

bool CzyZawiera(vector<int>tab, vector<int>x)
{
    for (int i = 0; i < x.size(); i++)
    {
        if (!CzyNalezy(tab, x[i]))
        {
            return false;
        }
    }
    return true;
}

vector<int>unikalnosc(vector<int>tab)
{
    vector<int>x;

    for (int i = 0; i < tab.size(); i++)
    {
        if (!CzyNalezy(x, tab[i]))
        {
            x.push_back(tab[i]);
        }
    }
    return x;
}

vector<int>podzielnosc(vector<int>tab, int dziel, int reszta = 0)
{
    vector<int>wynik;

    for (int i = 0; i < tab.size(); i++)
    {
        if (tab[i] % dziel == reszta)
        {
            wynik.push_back(tab[i]);
        }
    }
    return wynik;
}


int max(vector<int>tab)
{
    int x = tab[0];
    for (int i = 0; i < tab.size(); i++)
    {
        if (tab[i] > x)
        {
            x = tab[i];
        }
    }
    return x;
}


void wypisz(int x)
{
    cout << x<<"\n";
}

void wypisz(vector<int>tab)
{
    for (int i = 0; i < tab.size(); i++)
    {
        cout << " " << tab[i] << " ";
    }
}

int suma(vector<int>tab)
{
    int x = 0;

        for (int i = 0; i < tab.size(); i++)
        {
            x += tab[i];
        }
    return x;

}



vector<int>czestosc(vector<int>tab)
{
    vector<int>un=unikalnosc(tab);
    vector<int>wynik;

    for (int i = 0; i < un.size(); i++)
    {
        int x = 0;
        for (int j = 0; j < tab.size(); j++)
        {
            if (un[i] == tab[j])
            {
                x++;
            }
        }
        wynik.push_back(x);
    }


    return wynik;

}

bool CNK(map<int, int>map, int x)
{
    for (auto i : map)
    {
        if (i.first == x)
        {
            return true;
        }
    }
    return false;
}

map<int, int>ILE(vector<int>tab)
{
    map<int, int>x;

    for (int i = 0; i < tab.size(); i++)
    {
        if (!CNK(x, tab[i]))
        {
            x.insert({ tab[i],1 });
        }
        else
        {
            x[tab[i]]++;
        }
    }
    return x;
}

int main()
{
    srand(time(NULL));
    vector<int>a = { 1,5,2,7,2,1,7,2 };
    vector<int>b = { 1,5,2,7};

    cout << "Generuj: \n";
//   wypisz(generuj(100000, 1000));
   cout << "\n";
   cout << "index: ";
   wypisz(index(a, 5));
   cout << "Max: ";
   wypisz(max(a));
   cout << "CzyNalezy: ";
   wypisz(CzyNalezy(a, 22));
   cout << "CzyZawiera: ";
   wypisz(CzyZawiera(a, b));
   cout << "unikalnosc: \n";
   wypisz(unikalnosc(a));
   cout << "\n";
   cout << "Suma: ";
   wypisz(suma(a));
   cout << " \n \n";

   wypisz(ILE(a));




}

/*
1 wymyslic przyklad 
2 sprawdzic czy przyklad jest kompletny
3 sformalizowac przyklad
4 naglowek funkcji
5 cialo funkcji
6 Nie wiesz dalej? wroc do przykladu
*/
