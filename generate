#include <iostream>
#include <vector>
#include <map>
#include <cstdlib>

using namespace std;

void wypisz(int n) {
	cout << n << endl;
}

void wypisz(vector<int> tab) {
	for (int i = 0; i < tab.size(); i++)
		cout << tab[i] << ", ";
	cout << endl;
}

void wypisz(map<int, int>map)
{
	for (auto i : map)
	{
		cout << i.first << " > " << i.second << endl;
	}
}

bool czn(vector<int>tab, int x)
{
	for (int i = 0; i < tab.size(); i++)
	{
		if (x == tab[i])
		{
			return true;
		}
	}
	return false;
}

bool czz(vector<int>tab, vector<int>tab2)
{
	for (int i = 0; i < tab2.size(); i++)
	{
		if (!czn(tab,tab2[i]))
		{
			return false;
		}
	}
	return true;
}

int min(vector<int>tab)
{
	int x = tab[0];
	for (int i = 0; i < tab.size(); i++)
	{
		if (x > tab[i])
		{
			x = tab[i];
		}
	}
	return x;

}

int max(vector<int>tab)
{
	int x = tab[0];
	for (int i = 0; i < tab.size(); i++)
	{
		if (x < tab[i])
		{
			x = tab[i];
		}
	}
	return x;

}


vector<int>unikalnosc(vector<int>tab)
{
	vector<int>x;
		for (int i = 0; i < tab.size(); i++)
		{
			if (!czn(x, tab[i]))
			{
				x.push_back(tab[i]);
			}
		}
	return x;
}


bool CNK(map<int, int>map, int x)
{
	for (auto i : map)
	{
		if (i.first == x)
		{
			return true;
		}
	}
	return false;
}

map<int, int>ILE(vector<int>tab)
{
	map<int, int>w;
		for (int i = 0; i < tab.size(); i++)
		{
			if (!CNK(w, tab[i]))
			{
				w.insert({ tab[i], 1 });
			}
			else
			{
				w[tab[i]]++;
			}
		}
	return w;
}

vector<int>podzielnosc(vector<int>tab, int x, int r = 0)
{
	vector<int>w;
	vector<int>u = unikalnosc(tab);

	for (int i = 0; i < u.size(); i++)
	{
		if (u[i] % x == r)
		{
			w.push_back(u[i]);
		}
	}
	return w;
}

vector<int>generuj(int x, int max, int min)
{
	vector<int>w;
	for (int i = 0; i < x; i++)
	{
		w.push_back(rand() % (max - min) - min);
	}
	return w;
}

int main()
{
	srand(time(NULL));
	vector <int> tab = { 1, 2, 3, 3, 3, 3, 5, 8, 8, 2, 4, 4, 4, 5, 6, -8, -8, -8, -8, -8 };

	wypisz(podzielnosc(tab, 3));
	wypisz(generuj(10, 10, 1));
}


 CHOINKA
#include <iostream>

using namespace std;

void choinka(int n)
{
	for (int i = 1; i < 2*n + 2; i++)
		cout << "#";
	cout << endl;

	for (int i = 1; i < n; i++)
	{
		cout << "# ";
		for (int j = 0; j < n - 1 - i; j++)
		{
			cout << " ";
		}

		for (int j = 0; j < i * 2 - 1; j++)
			cout << "*";

		for (int j = 0; j < n - 1 - i; j++)
		{
			cout << " ";
		}
		cout << " #" << endl;
	}

	cout << "# ";
	for (int g = 0; g < n - 3; g++)
		cout << " ";
	cout << "*";
	for (int g = 0; g < n - 3; g++)
		cout << " ";
	cout << " #" << endl;
	for (int i = 1; i < 2 * n + 2; i++)
		cout << "#";
	cout << endl;
}

int main()
{
	int n;

	cin >> n;
	choinka(n);

	return 0;
}



VITO

#include <iostream>
#include <cmath>
#include <vector>

using namespace std;

int sum_dom(vector<int> tab, int id)
{
	int w = 0;
	for (int j = 0; j < tab.size(); j++)
		if (tab[id] < tab[j])
			w += tab[j] - tab[id];
		else
			w += tab[id] - tab[j];
	return w;
}

int XD(vector<int> tab)
{
	int dom = tab[0], min , min_min = 0;

	min = sum_dom(tab, 0);

	for (int i = 0; i < tab.size(); i++)
	{
		min_min = sum_dom(tab, i);

		if (min_min < min)
		{
			min = min_min;
			dom = tab[i];
		}
	}
	return dom;
}

void main()
{
	vector<int > tab = { 1,3,4,5,8,9,11 };
	cout << XD(tab);
}

VITO v2


#include <iostream>
#include <vector>

using namespace std;

void wypisz(int x)
{
	cout << x;
}

void wypisz(vector<int>tab)
{
	for (int i = 0; i < tab.size(); i++)
	{
		cout << tab[i]<<" ";
	}
}



int ujemne(int x)
{
	if (x < 0)
	{
		return x * - 1;
	}
	return x;
}

int odleglosc(vector<int>tab, int index)
{
	int wynik = 0;

	for (int i = 0; i < tab.size(); i++)
	{
		wynik += ujemne(tab[i] - tab[index]);
	}
	return wynik;
}


int main()
{
 


	vector<int>tab = { 1,3,4,5,8,9,11 };

	wypisz(odleglosc(tab,5));


}

